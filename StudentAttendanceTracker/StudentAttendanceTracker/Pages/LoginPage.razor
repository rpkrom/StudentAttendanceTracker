@page "/"
@inject NavigationManager NavigationManager
@inject UserInfoService UserInfoService

<h3>Login</h3>
<!-- Robert Price - Developer:
    This page is for all users to login to, next phase is to implement better routing so that users only see what they need to see
    See below comments for additional info
-->
<div class="vertical-form">
    <div class="form-group">
        <div class="radio-buttons">
            <div class="radio-button">
                <input type="radio" id="instructor" name="role" value="instructor" checked="@IsInstructorChecked" @onchange="ToggleAccessCodeField" />
                <label for="instructor">Instructor</label>
            </div>
            <div class="radio-button">
                <input type="radio" id="student" name="role" value="student" checked="@IsStudentChecked" @onchange="ToggleAccessCodeField" />
                <label for="student">Student</label>
            </div>
        </div>
    </div>
    <div class="form-group">
        <label for="username">Username</label>
        <input type="text" id="username" class="form-control" style="width: 300px;" @bind-value="username" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" class="form-control" style="width: 300px;" @bind-value="password" />
    </div>
    @if (selectedRole == "student")
    {
        <div class="form-group">
            <label for="accessCode">Access Code</label>
            <input id="accessCode" class="form-control" style="width: 300px;" @bind-value="accessCode" />
        </div>
    }
    <button class="btn btn-primary" @onclick="LoginClick" disabled="@isLoading">
        <i class="fas fa-spinner fa-spin" style="display: @(isLoading ? "inline" : "none")"></i>
        Login
    </button>
</div>

<style>
    .vertical-form .form-group {
        display: block;
        margin-bottom: 10px;
    }

    .radio-buttons {
        display: flex;
        gap: 10px;
    }

    .radio-button {
        display: flex;
        align-items: center;
    }
</style>


@code { // The below code handles all login functionailty
    [Inject]
    private DbContextOptions<ApplicationDbContext> DbContextOptions { get; set; } // db context used across the app for CRUD
    //private properties used in the page
    private string username { get; set; }
    private string password { get; set; } 
    private string selectedRole { get; set; }
    private string accessCode { get; set; }

    private bool isLoading = false;

    private bool IsInstructorChecked => selectedRole == "instructor";
    private bool IsStudentChecked => selectedRole == "student";
    //default on init method to set a state variable for selectedRole
    protected override void OnInitialized()
    {
        selectedRole = "instructor"; // Set the default selected role
    }
    // On change handler to update the selected role of the user and show the access code field
    private void ToggleAccessCodeField(ChangeEventArgs e)
    {
        selectedRole = e.Value.ToString();
    }
    // button click handler for triggering applicable methods below
    // also is asynchronous in order to free up the thread in the UI
    private async Task LoginClick()
    {
        isLoading = true;
        await LoginUser();
        isLoading = false;
    }
    //LoginUser() will check the database for a valid user/password and if applicable an access code, if all of those
    // are valid, the user is logged into the application
    private async Task LoginUser()
    {
        using (var dbContext = new ApplicationDbContext(DbContextOptions))
        {
            try
            {
                if (selectedRole == "student")
                {
                    var student = await dbContext.Students.FirstOrDefaultAsync(i => i.Username == username && i.Password == password);
                    var validAccessCode = await dbContext.AccessCodes.FirstOrDefaultAsync(c => c.Code == accessCode);

                    if (student != null)
                    {
                        if (username == student.Username && password == student.Password && accessCode == validAccessCode.Code)
                        {
                            var entry = new Attendance { Course_Id = validAccessCode.Id, Student_Id = student.Id, CreatedDate = DateTime.UtcNow };
                            dbContext.Attendances.Add(entry);
                            dbContext.SaveChanges();

                            UserInfoService.UserInfo.IsStudent = true;
                            NavigationManager.NavigateTo("/landing", true);
                        }
                    }

                }
                else if (selectedRole == "instructor")
                {
                    var instructor = await dbContext.Instructors.FirstOrDefaultAsync(i => i.Username == username);

                    if (instructor != null)
                    {
                        if (username == instructor.Username && password == instructor.Password)
                        {
                            UserInfoService.UserInfo.IsFaculty = true;
                            NavigationManager.NavigateTo("/landing", true);
                        }
                    }
                    if (username == "admin" && password == "admin")
                    {
                        UserInfoService.UserInfo.IsAdmin = true;
                        NavigationManager.NavigateTo("/students", true);
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                throw;
            }
            
        }

    }
    // Navigate() will navigate to the landing page if the user is an admin
    private void Navigate()
    {
        NavigationManager.NavigateTo("/landing", true);
    }
}
